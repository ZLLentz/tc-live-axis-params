<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_AxisWrite70x1" Id="{1343b3be-a270-4878-be8e-3cd51d2f102a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisWrite70x1
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
	stDriveRef: ST_DriveRef;
	stConfig: ST_AxisParam;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bBusy: BOOL;
	bError: BOOL;
	iAdsErrId: UINT;
	iCANopenErrId: UINT;
END_VAR
VAR
	iCycles: INT := 0;
	bReadOk: BOOL := FALSE;
	bInnerExec: BOOL := FALSE;
	fbWriteMaxCurrent: FB_CoEWrite_ByDriveRef;
	nIndMaxCurrent: WORD;
	fbWriteHoldingCurrent: FB_CoEWrite_ByDriveRef;
	nIndHoldingCurrent: WORD;
	fbWriteVoltage: FB_CoEWrite_ByDriveRef;
	nIndVoltage: WORD;
	fbWriteResistance: FB_CoEWrite_ByDriveRef;
	nIndResistance: WORD;
	fbWriteEmf: FB_CoEWrite_ByDriveRef;
	nIndEmf: WORD;
	fbWriteFullSteps: FB_CoEWrite_ByDriveRef;
	nIndFullSteps: WORD;
	fbWriteSpeedRange: FB_CoEWrite_ByDriveRef;
	nIndSpeedRange: WORD;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// File auto-generated! Take care editing!
// Clears errors and allows a new read
IF bReset THEN
	bExecute := FALSE;
	bReset := FALSE;
END_IF
// Fails in the first n cycles depending on terminals, wait a bit
IF NOT bReadOk THEN
	iCycles := iCycles + 1;
	IF iCycles > 100 THEN
		bReadOk := TRUE;
	END_IF
END_IF
bInnerExec := bExecute AND bReadOk;
nIndMaxCurrent := 16#8010;
fbWriteMaxCurrent(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndMaxCurrent,
	nSubIndex:=01,
	pSrcBuf:=ADR(stConfig.max_current),
	cbBufLen:=SIZEOF(stConfig.max_current));
nIndHoldingCurrent := 16#8010;
fbWriteHoldingCurrent(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndHoldingCurrent,
	nSubIndex:=02,
	pSrcBuf:=ADR(stConfig.holding_current),
	cbBufLen:=SIZEOF(stConfig.holding_current));
nIndVoltage := 16#8010;
fbWriteVoltage(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndVoltage,
	nSubIndex:=03,
	pSrcBuf:=ADR(stConfig.voltage),
	cbBufLen:=SIZEOF(stConfig.voltage));
nIndResistance := 16#8010;
fbWriteResistance(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndResistance,
	nSubIndex:=04,
	pSrcBuf:=ADR(stConfig.resistance),
	cbBufLen:=SIZEOF(stConfig.resistance));
nIndEmf := 16#8010;
fbWriteEmf(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEmf,
	nSubIndex:=05,
	pSrcBuf:=ADR(stConfig.emf),
	cbBufLen:=SIZEOF(stConfig.emf));
nIndFullSteps := 16#8010;
fbWriteFullSteps(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndFullSteps,
	nSubIndex:=06,
	pSrcBuf:=ADR(stConfig.full_steps),
	cbBufLen:=SIZEOF(stConfig.full_steps));
nIndSpeedRange := 16#8012;
fbWriteSpeedRange(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndSpeedRange,
	nSubIndex:=05,
	pSrcBuf:=ADR(stConfig.speed_range),
	cbBufLen:=SIZEOF(stConfig.speed_range));
bBusy := fbWriteMaxCurrent.bBusy OR fbWriteHoldingCurrent.bBusy OR fbWriteVoltage.bBusy OR fbWriteResistance.bBusy OR fbWriteEmf.bBusy OR fbWriteFullSteps.bBusy OR fbWriteSpeedRange.bBusy;
bError := fbWriteMaxCurrent.bError OR fbWriteHoldingCurrent.bError OR fbWriteVoltage.bError OR fbWriteResistance.bError OR fbWriteEmf.bError OR fbWriteFullSteps.bError OR fbWriteSpeedRange.bError;
IF NOT bError THEN
	iAdsErrId := 0;
ELSIF fbWriteMaxCurrent.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteMaxCurrent.iAdsErrId;
ELSIF fbWriteHoldingCurrent.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteHoldingCurrent.iAdsErrId;
ELSIF fbWriteVoltage.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteVoltage.iAdsErrId;
ELSIF fbWriteResistance.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteResistance.iAdsErrId;
ELSIF fbWriteEmf.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteEmf.iAdsErrId;
ELSIF fbWriteFullSteps.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteFullSteps.iAdsErrId;
ELSIF fbWriteSpeedRange.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteSpeedRange.iAdsErrId;
END_IF
IF NOT bError THEN
	iCANopenErrId := 0;
ELSIF fbWriteMaxCurrent.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteMaxCurrent.iCANopenErrId;
ELSIF fbWriteHoldingCurrent.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteHoldingCurrent.iCANopenErrId;
ELSIF fbWriteVoltage.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteVoltage.iCANopenErrId;
ELSIF fbWriteResistance.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteResistance.iCANopenErrId;
ELSIF fbWriteEmf.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteEmf.iCANopenErrId;
ELSIF fbWriteFullSteps.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteFullSteps.iCANopenErrId;
ELSIF fbWriteSpeedRange.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteSpeedRange.iCANopenErrId;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisWrite70x1">
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
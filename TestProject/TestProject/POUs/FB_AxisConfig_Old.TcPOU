<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_AxisConfig_Old" Id="{13c2a29c-c79d-423f-9560-f54711b0e7b3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisConfig_Old
VAR_INPUT
	stConfigSet: ST_AxisParams;
	bExecReadNC: BOOL := TRUE;
	bExecReadCoE: BOOL := TRUE;
	bExecWriteNC: BOOL := FALSE;
	bExecWriteCoe: BOOL := FALSE;
	fWriteValue: LREAL;
	nWriteIndex: INT;
END_VAR
VAR_OUTPUT
	stConfig: ST_AxisParams;
	nErrId: UDINT;
	bErr: BOOL;
	bHasInit: BOOL;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR
	fbNCRead: MC_ReadParameterSet;
	fbNCWrite: MC_WriteParameter;
	fbExecuteRiseEdge: R_Trig;
	stNC: ST_AxisParameterSet;
	stDriveRef: ST_DriveRef;
	fbReadCurrLim: FB_CoERead_ByDriveRef;
	nCurrLim: UINT;
	bCurrErr: BOOL;
	nAdsErr: UINT;
	nCANErr: UINT;
	nCount: UINT := 0;
	bErrReset: BOOL;
	fbWriteCurrLim: FB_CoeWrite_ByDriveRef;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Read NC params on first cycle and after each write
// Stuff into NC object
fbNCRead(Execute:=bExecReadNC,
	Parameter:=stNC,
	Axis:=Axis);
IF bExecReadNC AND fbNCRead.Done THEN
	bExecReadNC := FALSE;
END_IF
// Translate key params to stDriveRef (different attribute names)
stDriveRef.sNetId := stNC.sAmsNetId;
stDriveRef.nSlaveAddr := stNC.nPort;
stDriveRef.nDriveNo := WORD_TO_BYTE(stNC.nChnNo);

// Read CoE params
fbReadCurrLim(bExecute:=bExecReadCoE,
	stDriveRef:=stDriveRef,
	nIndex:=16#8010,
	nSubIndex:=1,
	pDstBuf:=ADR(nCurrLim),
	cbBufLen:=SIZEOF(nCurrLim),
	bError=>bCurrErr,
	iAdsErrId=>nAdsErr,
	iCANopenErrId=>nCANErr);
IF bExecReadCoE AND NOT fbReadCurrLim.bBusy THEN
	bExecReadCoE := FALSE;
END_IF

// Write if someone flipped the write bit
fbNCWrite(Execute:=bExecWriteNC,
	ParameterNumber:=nWriteIndex,
	Value:=fWriteValue,
	Axis:=Axis,
	Error=>bErr,
	ErrorID=>nErrId);
IF bErrReset THEN
	bExecWriteNC := FALSE;
	bErrReset := FALSE;
END_IF
// Flip the write bit back and schedule a read once done writing
fbExecuteRiseEdge(CLK:=fbNCWrite.Done);
IF fbExecuteRiseEdge.Q THEN
	bExecReadNC := TRUE;
	bExecWriteNC := FALSE;
END_IF

// Write max current param
fbWriteCurrLim(bExecute:=bExecWriteCoE,
	stDriveRef:=stDriveRef,
	nIndex:=16#8010,
	nSubIndex:=1,
	pSrcBuf:=ADR(nCurrLim),
	cbBufLen:=SIZEOF(nCurrLim),
	bError=>bCurrErr,
	iAdsErrId=>nAdsErr,
	iCANopenErrId=>nCANErr);
IF bExecWriteCoE AND NOT fbWriteCurrLim.bBusy THEN
	bExecWriteCoE := FALSE;
	bExecReadCoE := TRUE;
END_IF
*)]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisConfig_Old">
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="20" Count="2" />
      <LineId Id="122" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="4" />
      <LineId Id="139" Count="2" />
      <LineId Id="143" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="46" Count="3" />
      <LineId Id="63" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="175" Count="12" />
      <LineId Id="189" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="224" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
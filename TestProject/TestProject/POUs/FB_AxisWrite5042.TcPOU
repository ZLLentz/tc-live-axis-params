<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_AxisWrite5042" Id="{4b960d06-1013-4526-b775-14d9235ad57f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisWrite5042
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
	stDriveRef: ST_DriveRef;
	stConfig: ST_AxisParam;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bBusy: BOOL;
	bError: BOOL;
	iAdsErrId: UINT;
	iCANopenErrId: UINT;
END_VAR
VAR
	iCycles: INT := 0;
	bReadOk: BOOL := FALSE;
	bInnerExec: BOOL := FALSE;
	fbWriteEncSupply: FB_CoEWrite_ByDriveRef;
	nIndEncSupply: WORD;
	fbWriteEncClock: FB_CoEWrite_ByDriveRef;
	nIndEncClock: WORD;
	fbWriteEncMultiBits: FB_CoEWrite_ByDriveRef;
	nIndEncMultiBits: WORD;
	fbWriteEncSingleBits: FB_CoEWrite_ByDriveRef;
	nIndEncSingleBits: WORD;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// File auto-generated! Take care editing!
// Clears errors and allows a new read
IF bReset THEN
	bExecute := FALSE;
	bReset := FALSE;
END_IF
// Fails in the first n cycles depending on terminals, wait a bit
IF NOT bReadOk THEN
	iCycles := iCycles + 1;
	IF iCycles > 100 THEN
		bReadOk := TRUE;
	END_IF
END_IF
bInnerExec := bExecute AND bReadOk;
nIndEncSupply := 16#8008;
fbWriteEncSupply(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEncSupply,
	nSubIndex:=12,
	pSrcBuf:=ADR(stConfig.enc_supply),
	cbBufLen:=SIZEOF(stConfig.enc_supply));
CASE stDriveRef.nDriveNo OF
	1:
		nIndEncClock := 16#8008;
	2:
		nIndEncClock := 16#8018;
END_CASE
fbWriteEncClock(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEncClock,
	nSubIndex:=13,
	pSrcBuf:=ADR(stConfig.enc_clock),
	cbBufLen:=SIZEOF(stConfig.enc_clock));
CASE stDriveRef.nDriveNo OF
	1:
		nIndEncMultiBits := 16#8008;
	2:
		nIndEncMultiBits := 16#8018;
END_CASE
fbWriteEncMultiBits(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEncMultiBits,
	nSubIndex:=15,
	pSrcBuf:=ADR(stConfig.enc_multi_bits),
	cbBufLen:=SIZEOF(stConfig.enc_multi_bits));
CASE stDriveRef.nDriveNo OF
	1:
		nIndEncSingleBits := 16#8008;
	2:
		nIndEncSingleBits := 16#8018;
END_CASE
fbWriteEncSingleBits(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEncSingleBits,
	nSubIndex:=16,
	pSrcBuf:=ADR(stConfig.enc_single_bits),
	cbBufLen:=SIZEOF(stConfig.enc_single_bits));
bBusy := fbWriteEncSupply.bBusy OR fbWriteEncClock.bBusy OR fbWriteEncMultiBits.bBusy OR fbWriteEncSingleBits.bBusy;
bError := fbWriteEncSupply.bError OR fbWriteEncClock.bError OR fbWriteEncMultiBits.bError OR fbWriteEncSingleBits.bError;
IF NOT bError THEN
	iAdsErrId := 0;
ELSIF fbWriteEncSupply.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteEncSupply.iAdsErrId;
ELSIF fbWriteEncClock.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteEncClock.iAdsErrId;
ELSIF fbWriteEncMultiBits.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteEncMultiBits.iAdsErrId;
ELSIF fbWriteEncSingleBits.iAdsErrId > 0 THEN
	iAdsErrId := fbWriteEncSingleBits.iAdsErrId;
END_IF
IF NOT bError THEN
	iCANopenErrId := 0;
ELSIF fbWriteEncSupply.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteEncSupply.iCANopenErrId;
ELSIF fbWriteEncClock.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteEncClock.iCANopenErrId;
ELSIF fbWriteEncMultiBits.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteEncMultiBits.iCANopenErrId;
ELSIF fbWriteEncSingleBits.iCANopenErrId > 0 THEN
	iCANopenErrId := fbWriteEncSingleBits.iCANopenErrId;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisWrite5042">
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
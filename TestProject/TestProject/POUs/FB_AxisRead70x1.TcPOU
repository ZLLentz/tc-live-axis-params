<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_AxisRead70x1" Id="{5023dac2-cf73-48b6-b632-239f3c539df0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisRead70x1
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
	stDriveRef: ST_DriveRef;
END_VAR
VAR_IN_OUT
	stConfig: ST_AxisParams;
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bBusy: BOOL;
	bError: BOOL;
	iAdsErrId: UINT;
	iCANopenErrId: UINT;
END_VAR
VAR
	iCycles: INT := 0;
	bReadOk: BOOL := FALSE;
	bInnerExec: BOOL := FALSE;
	fbReadMaxCurrent: FB_CoERead_ByDriveRef;
	nIndMaxCurrent: WORD;
	fbReadHoldingCurrent: FB_CoERead_ByDriveRef;
	nIndHoldingCurrent: WORD;
	fbReadVoltage: FB_CoERead_ByDriveRef;
	nIndVoltage: WORD;
	fbReadResistance: FB_CoERead_ByDriveRef;
	nIndResistance: WORD;
	fbReadEmf: FB_CoERead_ByDriveRef;
	nIndEmf: WORD;
	fbReadFullSteps: FB_CoERead_ByDriveRef;
	nIndFullSteps: WORD;
	fbReadSpeedRange: FB_CoERead_ByDriveRef;
	nIndSpeedRange: WORD;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// File auto-generated! Take care editing!
// Clears errors and allows a new read
IF bReset THEN
	bExecute := FALSE;
	bReset := FALSE;
END_IF
// Fails in the first n cycles depending on terminals, wait a bit
IF NOT bReadOk THEN
	iCycles := iCycles + 1;
	IF iCycles > 100 THEN
		bReadOk := TRUE;
	END_IF
END_IF
bInnerExec := bExecute AND bReadOk;
nIndMaxCurrent := 16#8010;
fbReadMaxCurrent(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndMaxCurrent,
	nSubIndex:=01,
	pDstBuf:=ADR(stConfig.max_current),
	cbBufLen:=SIZEOF(stConfig.max_current));
nIndHoldingCurrent := 16#8010;
fbReadHoldingCurrent(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndHoldingCurrent,
	nSubIndex:=02,
	pDstBuf:=ADR(stConfig.holding_current),
	cbBufLen:=SIZEOF(stConfig.holding_current));
nIndVoltage := 16#8010;
fbReadVoltage(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndVoltage,
	nSubIndex:=03,
	pDstBuf:=ADR(stConfig.voltage),
	cbBufLen:=SIZEOF(stConfig.voltage));
nIndResistance := 16#8010;
fbReadResistance(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndResistance,
	nSubIndex:=04,
	pDstBuf:=ADR(stConfig.resistance),
	cbBufLen:=SIZEOF(stConfig.resistance));
nIndEmf := 16#8010;
fbReadEmf(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndEmf,
	nSubIndex:=05,
	pDstBuf:=ADR(stConfig.emf),
	cbBufLen:=SIZEOF(stConfig.emf));
nIndFullSteps := 16#8010;
fbReadFullSteps(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndFullSteps,
	nSubIndex:=06,
	pDstBuf:=ADR(stConfig.full_steps),
	cbBufLen:=SIZEOF(stConfig.full_steps));
nIndSpeedRange := 16#8012;
fbReadSpeedRange(bExecute:=bInnerExec,
	stDriveRef:=stDriveRef,
	nindex:=nIndSpeedRange,
	nSubIndex:=05,
	pDstBuf:=ADR(stConfig.speed_range),
	cbBufLen:=SIZEOF(stConfig.speed_range));
bBusy := fbReadMaxCurrent.bBusy OR fbReadHoldingCurrent.bBusy OR fbReadVoltage.bBusy OR fbReadResistance.bBusy OR fbReadEmf.bBusy OR fbReadFullSteps.bBusy OR fbReadSpeedRange.bBusy;
bError := fbReadMaxCurrent.bError OR fbReadHoldingCurrent.bError OR fbReadVoltage.bError OR fbReadResistance.bError OR fbReadEmf.bError OR fbReadFullSteps.bError OR fbReadSpeedRange.bError;
IF NOT bError THEN
	iAdsErrId := 0;
ELSIF fbReadMaxCurrent.iAdsErrId > 0 THEN
	iAdsErrId := fbReadMaxCurrent.iAdsErrId;
ELSIF fbReadHoldingCurrent.iAdsErrId > 0 THEN
	iAdsErrId := fbReadHoldingCurrent.iAdsErrId;
ELSIF fbReadVoltage.iAdsErrId > 0 THEN
	iAdsErrId := fbReadVoltage.iAdsErrId;
ELSIF fbReadResistance.iAdsErrId > 0 THEN
	iAdsErrId := fbReadResistance.iAdsErrId;
ELSIF fbReadEmf.iAdsErrId > 0 THEN
	iAdsErrId := fbReadEmf.iAdsErrId;
ELSIF fbReadFullSteps.iAdsErrId > 0 THEN
	iAdsErrId := fbReadFullSteps.iAdsErrId;
ELSIF fbReadSpeedRange.iAdsErrId > 0 THEN
	iAdsErrId := fbReadSpeedRange.iAdsErrId;
END_IF
IF NOT bError THEN
	iCANopenErrId := 0;
ELSIF fbReadMaxCurrent.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadMaxCurrent.iCANopenErrId;
ELSIF fbReadHoldingCurrent.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadHoldingCurrent.iCANopenErrId;
ELSIF fbReadVoltage.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadVoltage.iCANopenErrId;
ELSIF fbReadResistance.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadResistance.iCANopenErrId;
ELSIF fbReadEmf.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadEmf.iCANopenErrId;
ELSIF fbReadFullSteps.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadFullSteps.iCANopenErrId;
ELSIF fbReadSpeedRange.iCANopenErrId > 0 THEN
	iCANopenErrId := fbReadSpeedRange.iCANopenErrId;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisRead70x1">
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
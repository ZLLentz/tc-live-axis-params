<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_AxisReadNC" Id="{ae0d0d38-2171-41e5-b49c-714adaf92c76}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisReadNC
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
END_VAR
VAR_IN_OUT
	stConfig: ST_AxisParams;
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bValid: BOOL;
	bBusy: BOOL;
	bError: BOOL;
	nErrorID: UDINT;
END_VAR
VAR
	fbReadRefVel: MC_ReadParameter;
  	fbReadRefVelRisingEdge: R_TRIG;
	fbReadMaxVel: MC_ReadParameter;
  	fbReadMaxVelRisingEdge: R_TRIG;
	fbReadMaxAcc: MC_ReadParameter;
  	fbReadMaxAccRisingEdge: R_TRIG;
	fbReadMaxDec: MC_ReadParameter;
  	fbReadMaxDecRisingEdge: R_TRIG;
	fbReadDefAcc: MC_ReadParameter;
  	fbReadDefAccRisingEdge: R_TRIG;
	fbReadDefDec: MC_ReadParameter;
  	fbReadDefDecRisingEdge: R_TRIG;
	fbReadDefJerk: MC_ReadParameter;
  	fbReadDefJerkRisingEdge: R_TRIG;
	fbReadHomeSearch: MC_ReadParameter;
  	fbReadHomeSearchRisingEdge: R_TRIG;
	fbReadHomeSync: MC_ReadParameter;
  	fbReadHomeSyncRisingEdge: R_TRIG;
	fbReadManFast: MC_ReadParameter;
  	fbReadManFastRisingEdge: R_TRIG;
	fbReadManSlow: MC_ReadParameter;
  	fbReadManSlowRisingEdge: R_TRIG;
	fbReadEnableMinSoftLimit: MC_ReadBoolParameter;
  	fbReadEnableMinSoftLimitRisingEdge: R_TRIG;
	fbReadEnableMaxSoftLimit: MC_ReadBoolParameter;
  	fbReadEnableMaxSoftLimitRisingEdge: R_TRIG;
	fbReadMinSoftLimit: MC_ReadParameter;
  	fbReadMinSoftLimitRisingEdge: R_TRIG;
	fbReadMaxSoftLimit: MC_ReadParameter;
  	fbReadMaxSoftLimitRisingEdge: R_TRIG;
	fbReadMaxPosLagValue: MC_ReadParameter;
  	fbReadMaxPosLagValueRisingEdge: R_TRIG;
	fbReadMaxPosLagFilterTime: MC_ReadParameter;
  	fbReadMaxPosLagFilterTimeRisingEdge: R_TRIG;
	fbReadDeadTime: MC_ReadParameter;
  	fbReadDeadTimeRisingEdge: R_TRIG;
	fbReadEncScale: MC_ReadParameter;
  	fbReadEncScaleRisingEdge: R_TRIG;
	fbReadEncOffset: MC_ReadParameter;
  	fbReadEncOffsetRisingEdge: R_TRIG;
	fbReadEncInvert: MC_ReadBoolParameter;
  	fbReadEncInvertRisingEdge: R_TRIG;
	fbReadMotInvert: MC_ReadBoolParameter;
  	fbReadMotInvertRisingEdge: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// File auto-generated! Take care editing!
// Clears errors and allows a new read
IF bReset THEN
	bExecute := FALSE;
	bReset := FALSE;
END_IF
fbReadRefVel(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisRefVeloOnRefOutput,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadRefVelRisingEdge(CLK:=fbReadRefVel.Valid AND NOT fbReadRefVel.Busy);
IF fbReadRefVelRisingEdge.Q AND NOT fbReadRefVel.Error THEN
	stConfig.ref_vel := fbReadRefVel.Value;
END_IF
fbReadMaxVel(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisMaxVelocity,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxVelRisingEdge(CLK:=fbReadMaxVel.Valid AND NOT fbReadMaxVel.Busy);
IF fbReadMaxVelRisingEdge.Q AND NOT fbReadMaxVel.Error THEN
	stConfig.max_vel := fbReadMaxVel.Value;
END_IF
fbReadMaxAcc(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.MaxAccelerationSystem,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxAccRisingEdge(CLK:=fbReadMaxAcc.Valid AND NOT fbReadMaxAcc.Busy);
IF fbReadMaxAccRisingEdge.Q AND NOT fbReadMaxAcc.Error THEN
	stConfig.max_acc := fbReadMaxAcc.Value;
END_IF
fbReadMaxDec(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.MaxDecelerationSystem,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxDecRisingEdge(CLK:=fbReadMaxDec.Valid AND NOT fbReadMaxDec.Busy);
IF fbReadMaxDecRisingEdge.Q AND NOT fbReadMaxDec.Error THEN
	stConfig.max_dec := fbReadMaxDec.Value;
END_IF
fbReadDefAcc(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisAcc,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadDefAccRisingEdge(CLK:=fbReadDefAcc.Valid AND NOT fbReadDefAcc.Busy);
IF fbReadDefAccRisingEdge.Q AND NOT fbReadDefAcc.Error THEN
	stConfig.def_acc := fbReadDefAcc.Value;
END_IF
fbReadDefDec(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisDec,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadDefDecRisingEdge(CLK:=fbReadDefDec.Valid AND NOT fbReadDefDec.Busy);
IF fbReadDefDecRisingEdge.Q AND NOT fbReadDefDec.Error THEN
	stConfig.def_dec := fbReadDefDec.Value;
END_IF
fbReadDefJerk(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisJerk,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadDefJerkRisingEdge(CLK:=fbReadDefJerk.Valid AND NOT fbReadDefJerk.Busy);
IF fbReadDefJerkRisingEdge.Q AND NOT fbReadDefJerk.Error THEN
	stConfig.def_jerk := fbReadDefJerk.Value;
END_IF
fbReadHomeSearch(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisCalibrationVelocityForward,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadHomeSearchRisingEdge(CLK:=fbReadHomeSearch.Valid AND NOT fbReadHomeSearch.Busy);
IF fbReadHomeSearchRisingEdge.Q AND NOT fbReadHomeSearch.Error THEN
	stConfig.home_search := fbReadHomeSearch.Value;
END_IF
fbReadHomeSync(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisCalibrationVelocityBackward,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadHomeSyncRisingEdge(CLK:=fbReadHomeSync.Valid AND NOT fbReadHomeSync.Busy);
IF fbReadHomeSyncRisingEdge.Q AND NOT fbReadHomeSync.Error THEN
	stConfig.home_sync := fbReadHomeSync.Value;
END_IF
fbReadManFast(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisManualVelocityFast,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadManFastRisingEdge(CLK:=fbReadManFast.Valid AND NOT fbReadManFast.Busy);
IF fbReadManFastRisingEdge.Q AND NOT fbReadManFast.Error THEN
	stConfig.man_fast := fbReadManFast.Value;
END_IF
fbReadManSlow(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisManualVelocitySlow,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadManSlowRisingEdge(CLK:=fbReadManSlow.Valid AND NOT fbReadManSlow.Busy);
IF fbReadManSlowRisingEdge.Q AND NOT fbReadManSlow.Error THEN
	stConfig.man_slow := fbReadManSlow.Value;
END_IF
fbReadEnableMinSoftLimit(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.EnableLimitNeg,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadEnableMinSoftLimitRisingEdge(CLK:=fbReadEnableMinSoftLimit.Valid AND NOT fbReadEnableMinSoftLimit.Busy);
IF fbReadEnableMinSoftLimitRisingEdge.Q AND NOT fbReadEnableMinSoftLimit.Error THEN
	stConfig.enable_min_soft_limit := fbReadEnableMinSoftLimit.Value;
END_IF
fbReadEnableMaxSoftLimit(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.EnableLimitPos,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadEnableMaxSoftLimitRisingEdge(CLK:=fbReadEnableMaxSoftLimit.Valid AND NOT fbReadEnableMaxSoftLimit.Busy);
IF fbReadEnableMaxSoftLimitRisingEdge.Q AND NOT fbReadEnableMaxSoftLimit.Error THEN
	stConfig.enable_max_soft_limit := fbReadEnableMaxSoftLimit.Value;
END_IF
fbReadMinSoftLimit(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.SWLimitNeg,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMinSoftLimitRisingEdge(CLK:=fbReadMinSoftLimit.Valid AND NOT fbReadMinSoftLimit.Busy);
IF fbReadMinSoftLimitRisingEdge.Q AND NOT fbReadMinSoftLimit.Error THEN
	stConfig.min_soft_limit := fbReadMinSoftLimit.Value;
END_IF
fbReadMaxSoftLimit(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.SWLimitPos,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxSoftLimitRisingEdge(CLK:=fbReadMaxSoftLimit.Valid AND NOT fbReadMaxSoftLimit.Busy);
IF fbReadMaxSoftLimitRisingEdge.Q AND NOT fbReadMaxSoftLimit.Error THEN
	stConfig.max_soft_limit := fbReadMaxSoftLimit.Value;
END_IF
fbReadMaxPosLagValue(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.MaxPositionLag,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxPosLagValueRisingEdge(CLK:=fbReadMaxPosLagValue.Valid AND NOT fbReadMaxPosLagValue.Busy);
IF fbReadMaxPosLagValueRisingEdge.Q AND NOT fbReadMaxPosLagValue.Error THEN
	stConfig.max_pos_lag_value := fbReadMaxPosLagValue.Value;
END_IF
fbReadMaxPosLagFilterTime(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisMaxPosLagFilterTime,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMaxPosLagFilterTimeRisingEdge(CLK:=fbReadMaxPosLagFilterTime.Valid AND NOT fbReadMaxPosLagFilterTime.Busy);
IF fbReadMaxPosLagFilterTimeRisingEdge.Q AND NOT fbReadMaxPosLagFilterTime.Error THEN
	stConfig.max_pos_lag_filter_time := fbReadMaxPosLagFilterTime.Value;
END_IF
fbReadDeadTime(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisDelayTimeVeloPosition,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadDeadTimeRisingEdge(CLK:=fbReadDeadTime.Valid AND NOT fbReadDeadTime.Busy);
IF fbReadDeadTimeRisingEdge.Q AND NOT fbReadDeadTime.Error THEN
	stConfig.dead_time := fbReadDeadTime.Value;
END_IF
fbReadEncScale(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisEncoderScalingFactor,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadEncScaleRisingEdge(CLK:=fbReadEncScale.Valid AND NOT fbReadEncScale.Busy);
IF fbReadEncScaleRisingEdge.Q AND NOT fbReadEncScale.Error THEN
	stConfig.enc_scale := fbReadEncScale.Value;
END_IF
fbReadEncOffset(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadEncOffsetRisingEdge(CLK:=fbReadEncOffset.Valid AND NOT fbReadEncOffset.Busy);
IF fbReadEncOffsetRisingEdge.Q AND NOT fbReadEncOffset.Error THEN
	stConfig.enc_offset := fbReadEncOffset.Value;
END_IF
fbReadEncInvert(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisEncoderDirectionInverse,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadEncInvertRisingEdge(CLK:=fbReadEncInvert.Valid AND NOT fbReadEncInvert.Busy);
IF fbReadEncInvertRisingEdge.Q AND NOT fbReadEncInvert.Error THEN
	stConfig.enc_invert := fbReadEncInvert.Value;
END_IF
fbReadMotInvert(Enable:=bExecute,
	ParameterNumber:=MC_AxisParameter.AxisMotorDirectionInverse,
	ReadMode:=E_ReadMode.READMODE_ONCE,
	Axis:=Axis);
fbReadMotInvertRisingEdge(CLK:=fbReadMotInvert.Valid AND NOT fbReadMotInvert.Busy);
IF fbReadMotInvertRisingEdge.Q AND NOT fbReadMotInvert.Error THEN
	stConfig.mot_invert := fbReadMotInvert.Value;
END_IF
bValid := fbReadRefVel.Valid AND fbReadMaxVel.Valid AND fbReadMaxAcc.Valid AND fbReadMaxDec.Valid AND fbReadDefAcc.Valid AND fbReadDefDec.Valid AND fbReadDefJerk.Valid AND fbReadHomeSearch.Valid AND fbReadHomeSync.Valid AND fbReadManFast.Valid AND fbReadManSlow.Valid AND fbReadEnableMinSoftLimit.Valid AND fbReadEnableMaxSoftLimit.Valid AND fbReadMinSoftLimit.Valid AND fbReadMaxSoftLimit.Valid AND fbReadMaxPosLagValue.Valid AND fbReadMaxPosLagFilterTime.Valid AND fbReadDeadTime.Valid AND fbReadEncScale.Valid AND fbReadEncOffset.Valid AND fbReadEncInvert.Valid AND fbReadMotInvert.Valid;
bBusy := fbReadRefVel.Busy OR fbReadMaxVel.Busy OR fbReadMaxAcc.Busy OR fbReadMaxDec.Busy OR fbReadDefAcc.Busy OR fbReadDefDec.Busy OR fbReadDefJerk.Busy OR fbReadHomeSearch.Busy OR fbReadHomeSync.Busy OR fbReadManFast.Busy OR fbReadManSlow.Busy OR fbReadEnableMinSoftLimit.Busy OR fbReadEnableMaxSoftLimit.Busy OR fbReadMinSoftLimit.Busy OR fbReadMaxSoftLimit.Busy OR fbReadMaxPosLagValue.Busy OR fbReadMaxPosLagFilterTime.Busy OR fbReadDeadTime.Busy OR fbReadEncScale.Busy OR fbReadEncOffset.Busy OR fbReadEncInvert.Busy OR fbReadMotInvert.Busy;
bError := fbReadRefVel.Error OR fbReadMaxVel.Error OR fbReadMaxAcc.Error OR fbReadMaxDec.Error OR fbReadDefAcc.Error OR fbReadDefDec.Error OR fbReadDefJerk.Error OR fbReadHomeSearch.Error OR fbReadHomeSync.Error OR fbReadManFast.Error OR fbReadManSlow.Error OR fbReadEnableMinSoftLimit.Error OR fbReadEnableMaxSoftLimit.Error OR fbReadMinSoftLimit.Error OR fbReadMaxSoftLimit.Error OR fbReadMaxPosLagValue.Error OR fbReadMaxPosLagFilterTime.Error OR fbReadDeadTime.Error OR fbReadEncScale.Error OR fbReadEncOffset.Error OR fbReadEncInvert.Error OR fbReadMotInvert.Error;
IF NOT bError THEN
	nErrorID := 0;
ELSIF fbReadRefVel.ErrorID > 0 THEN
	nErrorID := fbReadRefVel.ErrorID;
ELSIF fbReadMaxVel.ErrorID > 0 THEN
	nErrorID := fbReadMaxVel.ErrorID;
ELSIF fbReadMaxAcc.ErrorID > 0 THEN
	nErrorID := fbReadMaxAcc.ErrorID;
ELSIF fbReadMaxDec.ErrorID > 0 THEN
	nErrorID := fbReadMaxDec.ErrorID;
ELSIF fbReadDefAcc.ErrorID > 0 THEN
	nErrorID := fbReadDefAcc.ErrorID;
ELSIF fbReadDefDec.ErrorID > 0 THEN
	nErrorID := fbReadDefDec.ErrorID;
ELSIF fbReadDefJerk.ErrorID > 0 THEN
	nErrorID := fbReadDefJerk.ErrorID;
ELSIF fbReadHomeSearch.ErrorID > 0 THEN
	nErrorID := fbReadHomeSearch.ErrorID;
ELSIF fbReadHomeSync.ErrorID > 0 THEN
	nErrorID := fbReadHomeSync.ErrorID;
ELSIF fbReadManFast.ErrorID > 0 THEN
	nErrorID := fbReadManFast.ErrorID;
ELSIF fbReadManSlow.ErrorID > 0 THEN
	nErrorID := fbReadManSlow.ErrorID;
ELSIF fbReadEnableMinSoftLimit.ErrorID > 0 THEN
	nErrorID := fbReadEnableMinSoftLimit.ErrorID;
ELSIF fbReadEnableMaxSoftLimit.ErrorID > 0 THEN
	nErrorID := fbReadEnableMaxSoftLimit.ErrorID;
ELSIF fbReadMinSoftLimit.ErrorID > 0 THEN
	nErrorID := fbReadMinSoftLimit.ErrorID;
ELSIF fbReadMaxSoftLimit.ErrorID > 0 THEN
	nErrorID := fbReadMaxSoftLimit.ErrorID;
ELSIF fbReadMaxPosLagValue.ErrorID > 0 THEN
	nErrorID := fbReadMaxPosLagValue.ErrorID;
ELSIF fbReadMaxPosLagFilterTime.ErrorID > 0 THEN
	nErrorID := fbReadMaxPosLagFilterTime.ErrorID;
ELSIF fbReadDeadTime.ErrorID > 0 THEN
	nErrorID := fbReadDeadTime.ErrorID;
ELSIF fbReadEncScale.ErrorID > 0 THEN
	nErrorID := fbReadEncScale.ErrorID;
ELSIF fbReadEncOffset.ErrorID > 0 THEN
	nErrorID := fbReadEncOffset.ErrorID;
ELSIF fbReadEncInvert.ErrorID > 0 THEN
	nErrorID := fbReadEncInvert.ErrorID;
ELSIF fbReadMotInvert.ErrorID > 0 THEN
	nErrorID := fbReadMotInvert.ErrorID;
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>